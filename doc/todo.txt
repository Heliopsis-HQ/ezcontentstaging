1 - DATA MANAGEMENT

. look for package creation/import code for every datatype to find out where a transcoding of data is needed:
  - object relation(s), xml block, etc... -> we need to tranform object ids into their remote equivalent
  - binary datatypes -> we need better support than fromstring/tostring do natively
  - ezpage: ???

  status:
  - export+import ok of object relations(s) and binary files (to be tested)
  - export+import to be done for xml block
  - export+import to be done for ezauthor
  - export+import to be done for ezuser
  - export+import to be done for ezenum ?
  - ezstarrating, ezgmaplocation, ezpage ?
  - other types that store ids internally ???

. add support for sending in object creation/modification requests the original timestamp and remote_id of creator user;
  - add support for importing that data into target system


2 - EVENTS

. source server: finish missing events:
  - swap
  - move (test it)
  - change main node (test it)

. source server: when sending an event of type delete (no trash), we should also remove from local queue all pending events for the given object (and maybe warn user too before doing so)

. source server: logical bug: if local obj has been deleted (no trash) and there are pending publication events for it, we will not be able to sync them it anymore
  => warn editor (on delete or on sync?), remove pending events, or... ?


3 - REST API

. target server: finish actions
  - remove language
  - set obj state
  - set main location

. test all actions

. source server does not yet send section id in query string when creating an object

. target server: make sure content creation triggers are used on target server too, to make server chaining possible

. target server: make sure php warnings do not break output even when display_warnings is on

. target server: it seems when there is a fatal error in creation of new content, content object is left in the db and not rolled back...


4 - INTERFACE

. source server: finish js code used by ajax calls for ezwt (it misses checking of return value, alert, changing icon state)

. source server: proper policy checking before allowing sync calls (ok in "feed" view; remains to be seen in ezjscore call)

. source server: settle on naming conventions (user-side), rewrite all text labels in templates

. source server: settle on set of sync icons: needs to sync, is syncing, no need to sync

. settle on list of cols available in feed view and in dashboard block; make sure that it works ok for items relating to deleted nodes (showing enough info)

. source server: reset all calls to ez18n to use a single namespace: "contentstating"

. source server: in wt tpl, try to filter out items in syncing status (show a different icon, do not allow to sync)

. source server: rework dashboard block so that it lists nodes instead of sync events?
  note that we will have problems with deleted objects not being shown there

. source server: allow admin user to delete events in pending status too (after confirmation dialog or via cli script)


5 - MISC

. create some documentation: a table of all events, and for each one:
  - the nodes affected (in terms of feeds that will have to be notified)
  - the nodes affected (in terms of which nodes in the ezwt toolbar should show a "sync" icon)
  - details of complex cases (where this logic is not straight)

. use the same classe to encode/decode objects on both source and target; same for attributes


Phase 2 (?)

. rest server: test ezp 4.6 using the 4.5 patch for ezpRestHttpRequestParser

. rest server: avoid php warnings generated while executing action to hit page output (use custom error handler, or what else? ... )

. fix: sending hide event sends an empty array encoded as json (same for setsection events). can we avoid this?

. produce .dba file

. source server: cli script that resets and initializes feeds. Also creates a publish event for all of content (same az efindexcontents)

. source server: add confirmation dialogs when deleting events / resetting feeds

. rest server: finish moving content-manipulation logic from controllers to models

. source server: add an extra per-feed ini parameter that decides whether content creation/modification dates on targets are kept in sync with source or sync event execution date is used instead

. refactor error condition management so that we get both a number and a string across the whole chain from the transport layer to the templates

. dependency tracking:
  - all events should not have a pending create event for any of their parents (or they cannot be synced)
  - obj relations?
  - set section: should not have a pending set section for one of its parents (nb: even for 2ndary locations? test it)
  - hide: should not have a pending set section for one of its parents

. verify events that need to happen before action: are we sure that after this event action can not be skipped (eg: because of some perms checking or some other events in chain?)
  Try to move them to "after" (eventually, patch operations: content/hide, ), or set up a two-phase logic:
  1. before action events sets up the sync-event in an "unconfirmed" state
  2. after action event moves the sync-event to "confirmed" state

. rest protocol: have source server use the "Fields" param in query string to limit data returned by target server and reduce bandwidth usage

. source server: check changes in events definitions (either operation definition or invocation) from ezp 4.1 to 4.5
  - removelocation: checked
  - addlocation: ok
  - hide: ok
  - sort: ok
  - set section:  ok
  - update priority: ok
  - delete: ok
  - removetranslation: ok
  - updatealwaysavailable
  - updatemainassignment
  - updateinitiallanguage


Phase 2:

. rest server: fix bug: when using auto_auth filter, eZ sends 2 session cookies
. source server: allow sync items that fail 3 consecutive sync attempts to be set to "suspended" state
. source server: allow finer grained permissions (sync per feed)
. source server: cronjob that passes and removes/resets sync items that have been in sync status for too long
. source server: coalescing of sync events
. add a sync-to-localhost transport class, that copies data to separate content trees without going through rest calls
. source server: graceful degradation: allow wt button to sync with no js available by posting to contentstaging/syncnode
. source server: add extended attr. filter: given target feed id, get for every node the sync events pending by using aggregate sql function bit_and
. source server: use some "struct" classes to hold data for every type of stagingevent instead of plain arrays, to make the kind of data expeted more evident
. for ezp 4.6, add also to the media gallery (and to users?) the new subtab added to object view for admin2 design
  - also maybe add extra items to context menus?
. source server: finish case where a move event becomes a create for a target server (create all versions, all languages)

Phase 3:
