. look for content/publish event at datatypes where a transcoding of data is needed:
  - object relations, xml block, etc... -> we need to tranform object ids into their remote equivalent

. when sending binary data over (ezimage, ezbinaryfile), it is not enough the base64 encoding - we need additional info (eg. original filename)

. when sending an event of type delete (no trash), we should also remove from local queue all pending events for the given object (and maybe warn user too before doing so)

. logical bug: if local obj has been deleted (no trash) and there are pending publication events for it, we will not be able to sync them it anymore
  => warn editor (on delete or on sync?), remove pending events, what? ...

. test: setsection event on a draft is registered or ignored?

. implement REST api (target-server side): work in progress...

. test delete event: how is it triggered? (a: it can be triggered even when obj still has more than 1 node attached)

. finish missing events: swap, move

. check changes in events definitions (either operation definition or invocation) from ezp 4.1 to 4.5
  - removelocation: checked
  - addlocation: ok
  - hide: ok
  - sort: ok
  - set section:  ok
  - update priority: ok
  - delete: ok
  - removetranslation: ok
  - updatealwaysavailable
  - updatemainassignment
  - updateinitiallanguage

. test setsection workflow event: does it create one staging event too much?

. finish js code used by ajax calls for ezwt (it misses checking of return value, alert, changing icon state)

. proper policy checking before allowing sync calls (ok in "feed" view; remains to be seen in ezjscore call)

. settle on naming conventions (user-side), rewrite all text labels in templates

. settle on set of sync icons: needs to sync, is syncing, no need to sync

. settle on list of cols available in feed view and in dashboard block; make sure that it works ok for items relating to deleted nodes (showing enough info)

. reset all calls to ez18n to use a single namespace: contentstating/etc...

. produce .dba file

. in wt tpl, try to filter out items in syncing status (show a different icon, do not allow to sync)

. cli script that resets and initializes feeds. Also creates an onpublish event for all of content (same az efndexcontents)

. rework dashboard block so that it lists nodes instead of sync events?
  note that we will have problems with deleted objects not being shown there

. create some documentation: a table of all events, and for each one:
  - the nodes affected (in terms of feeds that will have to be notified)
  - the nodes affected (in terms of which nodes in the ezwt toolbar should show a "sync" icon)
  - details of complex cases (where this logic is not straight)

. add confirmation dliagos when deleting events / resetting feeds

. allow admin user to delete events in pending status too (after confirmation dialog or via cli script)

. rename classes for target server to be prefixed with "eZ" ?

. use the same classe to encode/decode objects on both source and target

. fix bug: when using auto_auth filter, eZ sends 2 session cookies


Phase 2 (?)

. for ezp 4.6, add also to the media gallery (anbd to users?) the new subtab added to object view for admin2 design
  - also maybe add items to context menus?

. dependency tracking:
  - all events should not have a pending create event for any of their parents (or they cannot be synced)
  - obj relations?
  - set section: should not have a pending set section for one of its parents (nb: even for 2ndary locations? test it)
  - hide: should not have a pending set section for one of its parents

. verify events that need to happen before action: are we sure that after this event action can not be skipped (eg: because of some perms checking or some other events in chain?)
  Try to move them to "after" (eventually, patch operations: content/hide, ), or set up a two-phase logic:
  1. before action events sets up the sync-event in an "unconfirmed" state
  2. after action event moves the sync-event to "confirmed" state

. use some "struct" classes to hold data for every type of stagingevent instead of plain arrays, to make the kind of data expeted more evident


Phase 2:

. allow sync items that fail 3 consecutive sync attempts to be set to "suspended" state
. allow finer grained permissions (sync per feed)
. cronjob that passes and removes/resets sync items that have been in sync status for too long
. coalescing of sync events
. add a sync-to-localhost transport class, that copies data to separate content trees
. graceful degradation: allow wt button to sync with no js available by posting to contentstaging/syncnode
. add extended attr. filter: given target feed id, get for every node the sync events pending by using aggregate sql function bit_and
. add an extra per-feed ini parameter that decides whether content creation/modification dates on targets are kept in sync with source or sync event execution date is used instead
