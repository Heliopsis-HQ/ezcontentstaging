eZ Content Staging Extension
============================

Requirements
------------

Source server:
. eZ Publish 4.5 or later (note that patches have to be applied for versions 4.5 and 4.6)
. ggWebservices 0.11 or later
. ezjscore (if using ezwt)

Target server:
. eZ Publish 4.5 or later
. ezprestapiprovider extension (for rest controller classes)

NB: the extension shall be installed on both servers.


Installation
------------

Target server:
1. unzip the extension, enable it (make sure to regenerate autoloads)

2. enable rewrite rules to make the rest api accessible

3. disable oauth authentication (use basic auth with or without https):
   edit rest.ini.append.php:

   [Authentication]
   AuthenticationStyle=ezpRestBasicAuthStyle

4. make sure there is a user account that has enough rights to create/read/update/delete any content, e.g. admin

Source server:
1. unzip the extension, enable it (make sure to regenerate autoloads)

2. create the new db table: either go to "setup/Upgrade check/DB Upgrade check" in the admin interface, or use sql script in the sql/ folder

3. copy the files from the patches directory over the original eZ Publish kernel files (back up originals first)

4. enable all the needed workflow events:
  - create one workflow per trigger for all content-related triggers:

  - add to each workflow one event of type "stage <xxx>"

  - add each workflow to one trigger
    . add location: after
	. remove location: before
	. ...
    Note that for every one of the 15 operations relating to content, 2 triggers are available: Before and After.
    You do not need to create 30 workflows, only 15 - each worflow will be usable with the correct trigger type
	(either Before or After).

  - if you have existing workflows (eg. content approval), put the "stage" event where you deem appropriate (eg. after approval and wait-until-date events)

5. define target feed:
  . make sure all content classes, sections, languages, object states, are defined the same on source and target server
    (this has to be done by hand)

  . edit contentstagingsource.ini.append.php:

    [GeneralSettings]
    TargetList[]=<feedname>
    [Target_<feedname>]
    Name=<A descriptive name for this export feed>
	TransportClass=eZRestApiGGWSClientStagingTransport
    RemoteIdGeneratorClass=eZContentStagingLocalAsRemoteIdGenerator
    Server=<server_feedname> note: this can be the same or different from feedname, but has to be the same as used in wsproviders.ini
    Subtrees[]=<local_root_node_id>
    RemoteSubtrees[]=<target_root_node_id>

    make sure that for all root nodes of the feed in the source server, a corresponding root node exists on the target server

  . edit wsproviders.ini.append.php

	[<server_feedname>]
    providerType=REST
	providerUri=<url to rest api on target server, including the final part, eg: http://my.server.com/rest/api/contentstaging/v1>
	Options[]
	Options[authType]=1 (for basic auth)
	Options[login]=<username>
	Options[password]=<password>

6. in the Administration interface, go to the "Setup" tab, click on the "Content staging" link in the left-col menu.
   You should see the target feed listed. Click on the "check" link to verify that it is properly set up.
   Click on "init feed" button and sync the generated event


Troubleshooting
---------------

. for configuration/connectivity problems, the "check feed" link in the Admin interface page listing feeds is your friend

. if you receive error messages stating "Response received from server is not valid (unsupported format text/html)" when trying to syncronize events,
  a possible cause is that you might have DebugOutput enabled on the target server.
  To work around this problem, 2 solutions:
  1: disable DebugOutput on the target server (for the siteaccess used for the REST calls), or
  2: in configuration file wsproviders.ini.append.php, force the correct content type for your server definition:
  Options[responseType]=application/json
